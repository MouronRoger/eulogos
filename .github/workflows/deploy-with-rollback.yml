name: Deploy with Flexible Rollback

on:
  # Run on pushes to any branch
  push:
    branches:
      - '**'  # Match any branch

  # Allow manual triggering (especially for rollbacks)
  workflow_dispatch:
    inputs:
      perform_rollback:
        description: 'Perform rollback to a previous deployment'
        required: false
        type: boolean
        default: false
      deployment_id:
        description: 'Specific deployment ID to roll back to (leave empty to select latest successful)'
        required: false
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  APP_NAME: eulogos
  DOCKER_REGISTRY: ghcr.io
  # We'll use this as a base, but will convert to lowercase in the workflow
  DOCKER_IMAGE_BASE: ghcr.io/${{ github.repository_owner }}/eulogos

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      rollback: ${{ steps.rollback-check.outputs.rollback }}
      deployment_id: ${{ steps.rollback-check.outputs.deployment_id }}
      environment: ${{ steps.set-env.outputs.environment }}
      commit_sha: ${{ steps.get-info.outputs.commit_sha }}
      branch_name: ${{ steps.get-info.outputs.branch_name }}
      image_tag: ${{ steps.get-info.outputs.image_tag }}
      docker_image: ${{ steps.set-repo-owner.outputs.docker_image }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set lowercase repository owner
        id: set-repo-owner
        run: |
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "repo_owner_lower=${REPO_OWNER_LOWER}" >> $GITHUB_OUTPUT
          echo "docker_image=ghcr.io/${REPO_OWNER_LOWER}/eulogos" >> $GITHUB_OUTPUT
          echo "DOCKER_IMAGE=ghcr.io/${REPO_OWNER_LOWER}/eulogos" >> $GITHUB_ENV

      - name: Get deployment info
        id: get-info
        run: |
          # Get commit SHA and branch name
          COMMIT_SHA="${{ github.sha }}"
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"

          # Convert branch name to lowercase for Docker compatibility
          BRANCH_NAME_LOWER=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]')

          # Create a unique image tag based on branch and commit
          # This allows tracking deployment by both branch and specific commit
          # Format: branch-name_short-sha_timestamp
          TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
          SHORT_SHA=$(echo $COMMIT_SHA | cut -c1-7)
          IMAGE_TAG="${BRANCH_NAME_LOWER}_${SHORT_SHA}_${TIMESTAMP}"

          # Replace slashes in branch name with dashes for Docker tag compatibility
          IMAGE_TAG=$(echo "$IMAGE_TAG" | tr '/' '-')

          echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

          echo "Commit: ${COMMIT_SHA}"
          echo "Branch: ${BRANCH_NAME}"
          echo "Image tag: ${IMAGE_TAG}"

      - name: Check for rollback
        id: rollback-check
        run: |
          if [[ "${{ github.event.inputs.perform_rollback }}" == "true" ]]; then
            echo "rollback=true" >> $GITHUB_OUTPUT

            if [[ -n "${{ github.event.inputs.deployment_id }}" ]]; then
              echo "deployment_id=${{ github.event.inputs.deployment_id }}" >> $GITHUB_OUTPUT
              echo "Rollback requested to specific deployment: ${{ github.event.inputs.deployment_id }}"
            else
              # Will find the last successful deployment in deploy job
              echo "deployment_id=latest_successful" >> $GITHUB_OUTPUT
              echo "Rollback requested to latest successful deployment"
            fi
          else
            echo "rollback=false" >> $GITHUB_OUTPUT
            echo "deployment_id=" >> $GITHUB_OUTPUT
            echo "Normal deployment (no rollback)"
          fi

      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            # Default environment based on branch pattern
            if [[ "${{ steps.get-info.outputs.branch_name }}" == "main" ]]; then
              echo "environment=production" >> $GITHUB_OUTPUT
            else
              echo "environment=staging" >> $GITHUB_OUTPUT
            fi
          fi

          echo "Deployment environment: ${{ env.environment || 'staging' }}"

  build:
    needs: prepare
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.rollback == 'false'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ needs.prepare.outputs.docker_image }}:${{ needs.prepare.outputs.image_tag }}
            ${{ needs.prepare.outputs.docker_image }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create deployment metadata
        run: |
          echo '{
            "id": "${{ needs.prepare.outputs.image_tag }}",
            "commit_sha": "${{ needs.prepare.outputs.commit_sha }}",
            "branch_name": "${{ needs.prepare.outputs.branch_name }}",
            "timestamp": "${{ github.event.repository.updated_at }}",
            "triggered_by": "${{ github.actor }}",
            "environment": "${{ needs.prepare.outputs.environment }}"
          }' > deployment-metadata.json
          echo "Created deployment metadata file with contents:"
          cat deployment-metadata.json

      - name: Upload deployment metadata
        uses: actions/upload-artifact@v4
        with:
          name: deployment-metadata
          path: deployment-metadata.json
          retention-days: 90

  deploy:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: |
      always() &&
      (needs.build.result == 'success' || (needs.prepare.outputs.rollback == 'true' && needs.prepare.result == 'success'))
    environment: ${{ needs.prepare.outputs.environment }}

    steps:
      - name: Checkout for config files
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Create deployment record before actual deployment
      - name: Create deployment record
        if: needs.prepare.outputs.rollback == 'false'
        run: |
          # Ensure logs directory exists
          mkdir -p logs/deployments

          # Record the deployment using our tracker
          python -m app.scripts.deployment.deployment_tracker record \
            --id "${{ needs.prepare.outputs.image_tag }}" \
            --environment "${{ needs.prepare.outputs.environment }}" \
            --commit "${{ needs.prepare.outputs.commit_sha }}" \
            --branch "${{ needs.prepare.outputs.branch_name }}" \
            --image-tag "${{ needs.prepare.outputs.image_tag }}" \
            --deployed-by "${{ github.actor }}" \
            --status "deploying"

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          # This step would typically set up your kubeconfig using secrets
          # For example, using a secret to store your kubeconfig content:
          # echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          echo "Configuring kubectl (placeholder - use your actual cluster configuration)"

      - name: Deploy or Rollback
        id: deployment
        run: |
          if [[ "${{ needs.prepare.outputs.rollback }}" == "true" ]]; then
            DEPLOY_ID="${{ steps.find-deployment.outputs.deployment_id }}"
            echo "Performing rollback to deployment: ${DEPLOY_ID}"

            # Get deployment info from the tracker
            DEPLOYMENT_INFO=$(python -m app.scripts.deployment.deployment_tracker get --id ${DEPLOY_ID})

            if [ $? -ne 0 ]; then
              echo "Failed to get deployment information for ID: ${DEPLOY_ID}"
              exit 1
            fi

            # Deploy using the image tagged with this deployment ID
            DEPLOY_IMAGE="${{ needs.prepare.outputs.docker_image }}:${DEPLOY_ID}"

            # Log the rollback for audit purposes
            echo "ROLLBACK: Deploying ${DEPLOY_IMAGE} to ${{ needs.prepare.outputs.environment }}"
            echo "Rollback triggered by: ${{ github.actor }}"
            echo "Rollback from: ${{ needs.prepare.outputs.commit_sha }}"
            echo "Rollback timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

            # Execute rollback deployment
            # This is a placeholder - replace with your actual deployment command
            echo "kubectl set image deployment/${{ env.APP_NAME }} ${{ env.APP_NAME }}=${DEPLOY_IMAGE} -n ${{ needs.prepare.outputs.environment }}"
          else
            # Normal deployment
            DEPLOY_IMAGE="${{ needs.prepare.outputs.docker_image }}:${{ needs.prepare.outputs.image_tag }}"

            echo "Performing regular deployment: ${DEPLOY_IMAGE}"
            echo "Deployment to: ${{ needs.prepare.outputs.environment }}"

            # Execute deployment
            # This is a placeholder - replace with your actual deployment command
            echo "kubectl set image deployment/${{ env.APP_NAME }} ${{ env.APP_NAME }}=${DEPLOY_IMAGE} -n ${{ needs.prepare.outputs.environment }}"
          fi

          # Wait for deployment to complete
          echo "Waiting for deployment to complete..."
          sleep 30  # Replace with actual deployment status check

          echo "Deployment completed."

      # Update deployment record after successful deployment
      - name: Update deployment status
        if: needs.prepare.outputs.rollback == 'false'
        run: |
          python -m app.scripts.deployment.deployment_tracker record \
            --id "${{ needs.prepare.outputs.image_tag }}" \
            --environment "${{ needs.prepare.outputs.environment }}" \
            --commit "${{ needs.prepare.outputs.commit_sha }}" \
            --branch "${{ needs.prepare.outputs.branch_name }}" \
            --image-tag "${{ needs.prepare.outputs.image_tag }}" \
            --deployed-by "${{ github.actor }}" \
            --status "deployed"

  verify:
    runs-on: ubuntu-latest
    needs: [prepare, deploy]
    if: needs.prepare.outputs.rollback == 'false'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify deployment
        id: verify
        run: |
          echo "Verifying deployment in ${{ needs.prepare.outputs.environment }}"

          # Ensure logs directory exists
          mkdir -p logs/deployments

          # Run the verification script
          python -m app.scripts.deployment.verification_script \
            --environment "${{ needs.prepare.outputs.environment }}" \
            --deployment-id "${{ needs.prepare.outputs.image_tag }}" \
            --verified-by "${{ github.actor }}"

          # Capture the exit code to determine if verification passed
          VERIFICATION_RESULT=$?

          if [ $VERIFICATION_RESULT -eq 0 ]; then
            echo "verification_passed=true" >> $GITHUB_OUTPUT
            echo "Deployment verification successful!"

            # Update deployment record with verification status
            python -m app.scripts.deployment.deployment_tracker record \
              --id "${{ needs.prepare.outputs.image_tag }}" \
              --environment "${{ needs.prepare.outputs.environment }}" \
              --commit "${{ needs.prepare.outputs.commit_sha }}" \
              --branch "${{ needs.prepare.outputs.branch_name }}" \
              --image-tag "${{ needs.prepare.outputs.image_tag }}" \
              --deployed-by "${{ github.actor }}" \
              --status "verified"
          else
            echo "verification_passed=false" >> $GITHUB_OUTPUT
            echo "Deployment verification failed!"

            # Update deployment record with failure status
            python -m app.scripts.deployment.deployment_tracker record \
              --id "${{ needs.prepare.outputs.image_tag }}" \
              --environment "${{ needs.prepare.outputs.environment }}" \
              --commit "${{ needs.prepare.outputs.commit_sha }}" \
              --branch "${{ needs.prepare.outputs.branch_name }}" \
              --image-tag "${{ needs.prepare.outputs.image_tag }}" \
              --deployed-by "${{ github.actor }}" \
              --status "verification_failed"
          fi

      - name: Notify on failure
        if: steps.verify.outputs.verification_passed == 'false'
        run: |
          echo "Deployment verification failed! Consider rolling back."

          # You might want to send a notification here:
          # - Email alert
          # - Slack message
          # - Teams notification
          # - Trigger automatic rollback

  automatic-rollback:
    runs-on: ubuntu-latest
    needs: [prepare, deploy, verify]
    if: |
      always() &&
      needs.prepare.outputs.rollback == 'false' &&
      needs.verify.result == 'success' &&
      needs.verify.outputs.verification_passed == 'false'

    steps:
      - name: Trigger rollback workflow
        run: |
          echo "Initiating automatic rollback due to verification failure"

          # Trigger the same workflow with rollback parameters
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy-with-rollback.yml/dispatches \
            -d '{
              "ref": "${{ github.ref }}",
              "inputs": {
                "perform_rollback": "true",
                "deployment_id": "latest_successful",
                "environment": "${{ needs.prepare.outputs.environment }}"
              }
            }'
